/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "helper.h"
#include "keypos_34keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH1 LH0 RH0 RH1           

#define HM_TAPPING_TERM 350
#define COMBO_TAPPING_TERM 500
#define HR_IDLE_TERM 75

#define COMBO_FAST 20
#define COMBO_NORMAL 30
#define COMBO_SLOW 45
#define HOLD_TIME 250

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define OTHER   4
#define SYM     5

//shortcuts
#define HYPER_A &gqt LS(LG(LC(LALT))) A
#define HYPER_C &gqt LS(LG(LC(LALT))) C

#define RAYCAST &kp LS(LG(LC(LA(SQT))))

#define CLOSETAB &kp LG(W)
#define DELWORD &kp LA(BSPC)
#define PLAINPASTE &kp LS(LA(LG(V))) 
#define REDO &kp LS(LG(Z)) 
#define REDO_TAB &kp LS(LG(T)) 
#define TAB_UP &kp LC(LA(PG_UP))
#define TAB_DN &kp LC(LA(PG_DN))
#define BACK &kp LG(LBKT)  
#define FORWARD &kp LG(RBKT)
#define CMD_K &kp LG(K)
#define CMD_W &kp LG(W)
#define MIN &kp LG(M) //minimize
#define LOCK &kp LC(LG(Q))
#define HYPERK &kp LS(LG(LC(LALT))) //hyper key
#define BBIT LA(Z) //bitwarden fill

//hyper keys
#define TTASK LS(LG(LC(LA(K)))) //todoist task

#define CCLIP LS(LG(LC(LA(J)))) //raycast clipboard
#define GGL LS(LG(LC(LA(H)))) //raycast google
#define GGPT LS(LG(LC(LA(SEMI)))) //chat gpt search

#define XXX &none
#define ___ &trans
#define AS(keycode) &as LS(keycode) keycode
#define AS_FSLH &ht LS(FSLH) FSLH

&lt {  // layer-tap config
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

&sk {  // Sticky Layer Change
    release-after-ms = <3000>;
    quick-release;
};

/*               34 KEY MATRIX

  ╭────────────────────┬────────────────────╮ 
  │  0   1   2   3   4 │  5   6   7   8   9 │ 
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ 
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ 
  ╰───────────╮ 30  31 │ 32  33 ╭───────────╯ 
              ╰────────┴────────╯                */

/ {
    macros {
        auto_brackets: auto_brackets {
            label = "auto_brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LS(N9)>
                , <&kp LS(N0)>
                , <&kp LEFT>
                ;
        };
        selall_copy: selall_copy {
            label = "selall_copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LG(A)>
                , <&kp LG(C)>
                ;
        };
        sel_line: sel_line {
            label = "sel_line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LG(RIGHT)>
                , <&kp LG(LS(LEFT))>
                ;
        };
        sel_word: sel_word {
            label = "sel_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp LA(LS(LEFT))>
                ;
        };
        
        tap: tap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            // By default, macros will tap each behavior in the bindings list,
            // so this will tap "&kp <param1>".
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        emailp: emailp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp H &kp E &kp W &kp S &kp O &kp N &kp DOT &kp T &kp R &kp A &kp N &kp LS(N2) &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>
                ;
        };

        emailw: emailw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp H &kp E &kp W &kp S &kp O &kp N &kp DOT &kp T &kp R &kp A &kp N &kp LS(N2) &kp S &kp C &kp A &kp L &kp E &kp DOT &kp C &kp O &kp M>
                ;
        };

        tdate: tdate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SEMI &kp O &kp F>
                ;
        };

        ttdate: ttdate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp SEMI &kp U &kp F>
                ;
        };

        ddash: ddash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS>
                ;
        };
        rarrow: rarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp MINUS &kp MINUS &kp LS(DOT)>
                ;
        };

        rcmdd: rcmdd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp RGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp RGUI>
                ;
        };

        cplink: cplink {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LS(LG(C))>
                ;
        };

        obs: obs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LS(LG(LC(LA(X))))>
                ;
        };

        seall: seall {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LG(A)>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";

//delword
        combo_del_word {
            timeout-ms = <COMBO_FAST>;
            key-positions = <15 16>;
            require-prior-idle-ms = <50>;
            bindings = <DELWORD>;
        };

//select all
//        combo_selall {
//            timeout-ms = <COMBO_FAST>;
//            key-positions = <13 14>;
//            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
//            bindings = <&kp LG(A)>;
//        };

//play pause
        combo_ppause {
            timeout-ms = <COMBO_FAST>;
            key-positions = <17 18>;
            require-prior-idle-ms = <150>;
            bindings = <&kp C_PP>;
        };

//cmd k
        combo_cmdK {             
            timeout-ms = <COMBO_FAST>;
            key-positions = <12 13>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(K)>;
        };

//esc left
        combo_esc_left { 
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <1 2>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            //bindings = <&ht LG(K) ESC>;
            bindings = <&kp ESC>;
        };

//esc right
        combo_esc_right {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <7 8>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp ESC>;
        };

//f19
        combo_f19 {
        timeout-ms = <COMBO_SLOW>;
            key-positions = <17 18>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp F19>;
        };

//f18
        combo_f18 {
        timeout-ms = <COMBO_FAST>;
            key-positions = <11 12>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp F18>;
        };

//raycast - google
        combo_ggl {
        timeout-ms = <COMBO_FAST>;
            key-positions = <16 17>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LS(LG(LC(LA(H))))>;
        };

//raycast
//        combo_raycast {
//            timeout-ms = <COMBO_SLOW>;
//            key-positions = <11 13>;
//            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
//            bindings = <RAYCAST>;
//        };

//close tab
        combo_cmdW {
            timeout-ms = <COMBO_FAST>;
            key-positions = <2 12>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(W)>;
        };

//aprostophe 
        combo_aprostophe {
            timeout-ms = <COMBO_SLOW>;
            key-positions = <16 17 18>;
            require-prior-idle-ms = <20>;
            bindings = <&kp SQT>;
            //bindings = <&emw 0 SQT>;
        };

//back
        combo_back {
            timeout-ms = <COMBO_FAST>;
            key-positions = <3 13>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <BACK>;
        };

//minimize
        combo_minimize {
            timeout-ms = <COMBO_SLOW>;
            key-positions = <1 2 3>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <MIN>;
        };

//lock screen
        combo_lock {
            timeout-ms = <COMBO_SLOW>;
            key-positions = <0 9>;
            require-prior-idle-ms = <150>;
            bindings = <LOCK>;
        };        

//find        
        combo_find {
            timeout-ms = <COMBO_SLOW>;
            key-positions = <21 22 23>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(F)>;

        };

//cmd comma
        combo_cmdComma {
            timeout-ms = <COMBO_FAST>;
            key-positions = <5 15>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(COMMA)>;
        };

//emdash
        combo_undo_right {
            timeout-ms = <COMBO_FAST>;
            key-positions = <7 17>;
            require-prior-idle-ms = <50>;
            bindings = <&kp LS(LA(MINUS))>;
        };

//undo - left
        combo_undo_left {
            timeout-ms = <COMBO_FAST>;
            key-positions = <20 21>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(Z)>;
        };

//delete left hand
        combo_delete_left {
            timeout-ms = <COMBO_FAST>;
            key-positions = <12 22>;
            require-prior-idle-ms = <50>;
            bindings = <&kp DEL>;
        };

//copy
        combo_copy {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <21 22>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(C)>;
        };

//paste
        combo_paste {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <21 23>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(V)>;
        };

//cut
        combo_cut {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <20 22>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(X)>;
        };

//to do bullets
        combo_cmdL {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <26 27>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(L)>;
        };

//search files
        combo_cmdO {
            timeout-ms = <COMBO_NORMAL>;
            key-positions = <5 7>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(O)>;
        };

//new
        combo_cmdN {
            timeout-ms = <COMBO_FAST>;
            key-positions = <16 26>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LG(N)>;
        };

//refresh
        combo_cmdR {
            timeout-ms = <COMBO_FAST>;
            key-positions = <1 11>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(R)>;
        };

//bullets
        combo_bullets {
            timeout-ms = <COMBO_FAST>;
            key-positions = <6 16>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(LS(N8))>;
        };

//hyper hyphen        
        combo_cmdHyphen {
            timeout-ms = <COMBO_FAST>;
            key-positions = <13 23>;
            require-prior-idle-ms = <150>;
            bindings = <&kp LA(LC(LS(LG(MINUS))))>;
        };
        
//save
        combo_cmdS {
            timeout-ms = <COMBO_FAST>;
            key-positions = <14 24>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(S)>;
        };

//quit
        combo_cmdQ {
            timeout-ms = <COMBO_SLOW>;
            key-positions = <1 2 7 8>;
            require-prior-idle-ms = <COMBO_TAPPING_TERM>;
            bindings = <&kp LG(Q)>;
        };
    };

    behaviors {
        gqt: require-prior-idle {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                     
            require-prior-idle-ms = <HR_IDLE_TERM>;   
            bindings = <&kp>, <&kp>;
        };
        gqt_l: thumb_right_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP_SPACE";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>; //updated from HM_TAPPING_TERM
            require-prior-idle-ms = <15>;         
            bindings = <&mo>, <&kp>;
        };
        hr_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;               
            require-prior-idle-ms = <HR_IDLE_TERM>; 
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;            
        };
        hr_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <HR_IDLE_TERM>; 
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;           
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_LEFT";
            #binding-cells = <2>;
            bindings = <&mo>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;              
            require-prior-idle-ms = <HR_IDLE_TERM>; 
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;            
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_RIGHT";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <HR_IDLE_TERM>;   
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;            
        };
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&sk LSHIFT>, <&kp LG(K)>;
        };
        
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&tap>, <&kp>;
        };
        emp: emp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&emailp>, <&kp>;
        };
        emw: emw {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&emailw>, <&kp>;
        };

        td: td {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&tdate>, <&kp>;
        };

        ttd: ttd {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&ttdate>, <&kp>;
        };

        ed: ed {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&ddash>, <&kp>;
        };
        ab: ab {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&auto_brackets>, <&kp>;
        };
        ra: ra {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&rarrow>, <&kp>;
        };

        rc: rc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&rcmdd>, <&kp>;
        };
        
        cl: cl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&cplink>, <&kp>;
        };

        ob: ob {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&obs>, <&kp>;
        };

        sal: sal {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <HOLD_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&seall>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
//canary

//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
&emp 0 W      &ht LS(N3) L  &ht LS(N7) Y  &cl 0 P      &emw 0 B                    &ht BBIT Z  &ht LS(N4) F  &ed 0 O      &ht LS(N5) U  &ht GGPT SEMI      
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
HYPER_C       &hl_l 3 R     &ht LS(N2) S  &hl_l 1 T    &sal 0 G                    &ra 0 M     &ht LS(N1) N  &ab 0 E      &ht LS(N8) I  HYPER_A       
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
&ht LG(Z) Q   &ht CCLIP J   &ht LG(C) V   &ht LG(V) D  &hl_l 4 K                   &ob 0 X     &ht GGL H     &td 0 COMMA  &ttd 0 DOT    AS_FSLH   
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘   
                           &sk LSHIFT   &as RGUI LS(LG(LC(LA(SQT))))           &kp BSPC  &gqt_l 2 SPACE     
                       // └────────────┴─────────┘                          └─────────┴─────────┘

                        >;
                };
                lower_layer {
                        bindings = <

// layer 1 - navigation and editing - left index??

//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
   CLOSETAB   MIN       PLAINPASTE  REDO      REDO_TAB                             TAB_UP    &kp LG(MINUS) &kp UP   &kp LG(EQUAL) CMD_W      
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   &kp LSHFT  &kp LALT  &kp LGUI    XXX       XXX                                  TAB_DN    &kp LEFT      &kp DOWN &kp RIGHT     &kp TAB  
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   &kp LG(Z)  &kp LG(X) &kp LG(C)   &kp LG(V) &kp LG(B)                            XXX       CMD_K         &kp DEL  &kp LS(RET)   &kp RET  
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘
                            ___          ___                                 ___        ___      
                       // └────────────┴─────────┘                          └─────────┴─────────┘
                        >;
                };

                raise_layer {
                        bindings = < 

// layer 2 - symbols and media - right thumb
  
//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
   XXX       XXX       &kp LS(LBKT) &kp LS(RBKT)  XXX                              &kp TILDE &kp C_PP     &kp C_BRI_UP XXX          XXX     
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       &kp LBKT     &kp RBKT      XXX                              &kp BSLH  &kp C_VOL_DN &kp C_BRI_DN &kp C_VOL_UP XXX
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       XXX          XXX           XXX                              XXX       &kp LS(N9)   &kp LS(N0)   XXX          XXX     
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘
                            ___          ___                                 ___        ___      
                       // └────────────┴─────────┘                          └─────────┴─────────┘
                        >;
                };

                adjust_layer {
                        bindings = <                    

// layer 3 - numbers and settings and nav - left ring finger

//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
   XXX       XXX       XXX        XXX         XXX                                  &kp F4    &kp N7     &kp N8        &kp N9      &kp LS(EQUAL)  
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       &kp LGUI   XXX         XXX                                  &kp DOT   &kp N4     &kp N5        &kp N6      &kp EQUAL      
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       XXX        XXX         XXX                                  &kp N0    &kp N1     &kp N2        &kp N3      XXX            
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘
                            ___          ___                                 ___        ___      
                       // └────────────┴─────────┘                          └─────────┴─────────┘
                        >;
                };

                other_layer {
                        bindings = <                    

// layer 4 - other home row - left pinky

//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
   XXX       XXX       XXX        XXX         XXX                                  XXX       &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR  
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       XXX        XXX         XXX                                  XXX       XXX           XXX           XXX           XXX        
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
&bootloader  XXX       XXX        XXX         XXX                                  XXX       XXX           XXX           XXX           &bootloader        
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘
                            ___          ___                                 ___        ___      
                       // └────────────┴─────────┘                          └─────────┴─────────┘
                        >;
                };
                sym_layer {
                        bindings = <                    

// layer 5 - right index

//┌─────────┬─────────┬──────────┬───────────┬─────────┐                          ┌─────────┬──────────┬─────────────┬───────────┬──────────┐
   XXX       XXX       XXX        XXX         XXX                                  XXX       XXX        XXX           XXX         XXX        
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       XXX        XXX         XXX                                  XXX       XXX        XXX           XXX         XXX        
//├─────────┼─────────┼──────────┼───────────┼─────────┤                          ├─────────┼──────────┼─────────────┼───────────┼──────────┤
   XXX       XXX       XXX        XXX         XXX                                  XXX       XXX        XXX           XXX         XXX        
//└─────────┴─────────┴───┬──────┴─────┬─────┴───┬─────┘                          └───┬─────┴───┬──────┴─────────────┴───────────┴──────────┘
                            ___          ___                                 ___        ___      
                       // └────────────┴─────────┘                          └─────────┴─────────┘
                        >;
                };
        };
};
